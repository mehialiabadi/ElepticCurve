In this repo, we would like to gain an understanding of implemnting some pure Eleptic Curve on Finite Field in Rust?
Let's kick off with some explanation on EC and why we need to be limited in Finite feild in practice

The elliptic curve equation over the finite field ùîΩp takes the following form:

$y^2 ‚â° x^3 + ax + b (mod p)$


As we require to work in a field, all algebraic operations should satisfy field requirements:
  Point addition in fieldover curve: if R and Q are two point on curve, we can uniquely compute R+Q 
  Multiplication in field over curve: if R is a point on curve and k be any arbitraty number, we an compute k*R
  Point reverse in field over curve : given any point R, we can take ‚àíR to be the point opposite it.
  Point subtraction in filed over curve: if R and Q are two point on curve, R-Q means addition of  R+(-Q)
  
  If R be a point on curve R+(-R)=0, indeed P+Q=0 means R and Q are opposite of each other.
  
  We know that all (x,y) points belongs to field ùîΩp and all operations are occured in mod p. 
  
  There are a bunch of EC curves can be used in cryptography. Let's go though the standrad ec curve which has been used in bitcoin
 , spec256k1. 
 
 As we mentioned each curve defined by an equation, in case of  spec256k1, our eqiation is as follows: 
 Equation: 
 Base point:
 
 
 
